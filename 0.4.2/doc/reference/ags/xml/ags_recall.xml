<?xml version="1.0"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.3//EN"
               "http://www.oasis-open.org/docbook/xml/4.3/docbookx.dtd"
[
  <!ENTITY % local.common.attrib "xmlns:xi  CDATA  #FIXED 'http://www.w3.org/2003/XInclude'">
]>
<refentry id="ags-AgsRecall">
<refmeta>
<refentrytitle role="top_of_page" id="ags-AgsRecall.top_of_page">AgsRecall</refentrytitle>
<manvolnum>3</manvolnum>
<refmiscinfo>
  AGS Library
</refmiscinfo>
</refmeta>
<refnamediv>
<refname>AgsRecall</refname>
<refpurpose></refpurpose>
</refnamediv>

<refsynopsisdiv id="ags-AgsRecall.synopsis" role="synopsis">
<title role="synopsis.title">Synopsis</title>

<synopsis>#define             <link linkend="AGS-RECALL-DEFAULT-BUILD-ID:CAPS">AGS_RECALL_DEFAULT_BUILD_ID</link>
#define             <link linkend="AGS-RECALL-DEFAULT-VERSION:CAPS">AGS_RECALL_DEFAULT_VERSION</link>
#define             <link linkend="AGS-RECALL-HANDLER:CAPS">AGS_RECALL_HANDLER</link>                  (handler)
struct              <link linkend="AgsRecall">AgsRecall</link>;
struct              <link linkend="AgsRecallClass">AgsRecallClass</link>;
enum                <link linkend="AgsRecallFlags">AgsRecallFlags</link>;
struct              <link linkend="AgsRecallHandler">AgsRecallHandler</link>;
enum                <link linkend="AgsRecallNotifyDependencyMode">AgsRecallNotifyDependencyMode</link>;
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="ags-recall-add-child">ags_recall_add_child</link>                (<parameter><link linkend="AgsRecall"><type>AgsRecall</type></link> *recall</parameter>,
                                                         <parameter><link linkend="AgsRecall"><type>AgsRecall</type></link> *child</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="ags-recall-add-dependency">ags_recall_add_dependency</link>           (<parameter><link linkend="AgsRecall"><type>AgsRecall</type></link> *recall</parameter>,
                                                         <parameter><link linkend="AgsRecallDependency"><type>AgsRecallDependency</type></link> *dependency</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="ags-recall-add-handler">ags_recall_add_handler</link>              (<parameter><link linkend="AgsRecall"><type>AgsRecall</type></link> *recall</parameter>,
                                                         <parameter><link linkend="AgsRecallHandler"><type>AgsRecallHandler</type></link> *recall_handler</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="ags-recall-cancel">ags_recall_cancel</link>                   (<parameter><link linkend="AgsRecall"><type>AgsRecall</type></link> *recall</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="ags-recall-child-added">ags_recall_child_added</link>              (<parameter><link linkend="AgsRecall"><type>AgsRecall</type></link> *parent</parameter>,
                                                         <parameter><link linkend="AgsRecall"><type>AgsRecall</type></link> *child</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="ags-recall-done">ags_recall_done</link>                     (<parameter><link linkend="AgsRecall"><type>AgsRecall</type></link> *recall</parameter>);
<link linkend="AgsRecall"><returnvalue>AgsRecall</returnvalue></link> *         <link linkend="ags-recall-duplicate">ags_recall_duplicate</link>                (<parameter><link linkend="AgsRecall"><type>AgsRecall</type></link> *recall</parameter>,
                                                         <parameter><link linkend="AgsRecallID"><type>AgsRecallID</type></link> *recall_id</parameter>);
<link linkend="GList"><returnvalue>GList</returnvalue></link> *             <link linkend="ags-recall-find-by-effect">ags_recall_find_by_effect</link>           (<parameter><link linkend="GList"><type>GList</type></link> *list</parameter>,
                                                         <parameter><link linkend="AgsRecallID"><type>AgsRecallID</type></link> *recall_id</parameter>,
                                                         <parameter><link linkend="char"><type>char</type></link> *effect</parameter>);
<link linkend="GList"><returnvalue>GList</returnvalue></link> *             <link linkend="ags-recall-find-provider">ags_recall_find_provider</link>            (<parameter><link linkend="GList"><type>GList</type></link> *recall</parameter>,
                                                         <parameter><link linkend="GObject"><type>GObject</type></link> *provider</parameter>);
<link linkend="GList"><returnvalue>GList</returnvalue></link> *             <link linkend="ags-recall-find-provider-with-recycling-container">ags_recall_find_provider_with_recycling_container</link>
                                                        (<parameter><link linkend="GList"><type>GList</type></link> *recall</parameter>,
                                                         <parameter><link linkend="GObject"><type>GObject</type></link> *provider</parameter>,
                                                         <parameter><link linkend="GObject"><type>GObject</type></link> *recycling_container</parameter>);
<link linkend="GList"><returnvalue>GList</returnvalue></link> *             <link linkend="ags-recall-find-recycling-container">ags_recall_find_recycling_container</link> (<parameter><link linkend="GList"><type>GList</type></link> *recall</parameter>,
                                                         <parameter><link linkend="GObject"><type>GObject</type></link> *recycling_container</parameter>);
<link linkend="GList"><returnvalue>GList</returnvalue></link> *             <link linkend="ags-recall-find-template">ags_recall_find_template</link>            (<parameter><link linkend="GList"><type>GList</type></link> *recall</parameter>);
<link linkend="GList"><returnvalue>GList</returnvalue></link> *             <link linkend="ags-recall-find-type">ags_recall_find_type</link>                (<parameter><link linkend="GList"><type>GList</type></link> *recall</parameter>,
                                                         <parameter><link linkend="GType"><type>GType</type></link> type</parameter>);
<link linkend="GList"><returnvalue>GList</returnvalue></link> *             <link linkend="ags-recall-find-type-with-recycling-container">ags_recall_find_type_with_recycling_container</link>
                                                        (<parameter><link linkend="GList"><type>GList</type></link> *recall</parameter>,
                                                         <parameter><link linkend="GType"><type>GType</type></link> type</parameter>,
                                                         <parameter><link linkend="GObject"><type>GObject</type></link> *recycling_container</parameter>);
<link linkend="GList"><returnvalue>GList</returnvalue></link> *             <link linkend="ags-recall-get-children">ags_recall_get_children</link>             (<parameter><link linkend="AgsRecall"><type>AgsRecall</type></link> *recall</parameter>);
<link linkend="GList"><returnvalue>GList</returnvalue></link> *             <link linkend="ags-recall-get-dependencies">ags_recall_get_dependencies</link>         (<parameter><link linkend="AgsRecall"><type>AgsRecall</type></link> *recall</parameter>);
<link linkend="AgsRecallHandler"><returnvalue>AgsRecallHandler</returnvalue></link> *  <link linkend="ags-recall-handler-alloc">ags_recall_handler_alloc</link>            (<parameter>const <link linkend="gchar"><type>gchar</type></link> *signal_name</parameter>,
                                                         <parameter><link linkend="GCallback"><type>GCallback</type></link> callback</parameter>,
                                                         <parameter><link linkend="GObject"><type>GObject</type></link> *data</parameter>);
<link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>            <link linkend="ags-recall-is-done">ags_recall_is_done</link>                  (<parameter><link linkend="GList"><type>GList</type></link> *recalls</parameter>,
                                                         <parameter><link linkend="GObject"><type>GObject</type></link> *recycling_container</parameter>);
<link linkend="AgsRecall"><returnvalue>AgsRecall</returnvalue></link> *         <link linkend="ags-recall-new">ags_recall_new</link>                      ();
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="ags-recall-notify-dependency">ags_recall_notify_dependency</link>        (<parameter><link linkend="AgsRecall"><type>AgsRecall</type></link> *recall</parameter>,
                                                         <parameter><link linkend="guint"><type>guint</type></link> dependency</parameter>,
                                                         <parameter><link linkend="gint"><type>gint</type></link> count</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="ags-recall-remove">ags_recall_remove</link>                   (<parameter><link linkend="AgsRecall"><type>AgsRecall</type></link> *recall</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="ags-recall-remove-child">ags_recall_remove_child</link>             (<parameter><link linkend="AgsRecall"><type>AgsRecall</type></link> *recall</parameter>,
                                                         <parameter><link linkend="AgsRecall"><type>AgsRecall</type></link> *child</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="ags-recall-remove-dependency">ags_recall_remove_dependency</link>        (<parameter><link linkend="AgsRecall"><type>AgsRecall</type></link> *recall</parameter>,
                                                         <parameter><link linkend="AgsRecall"><type>AgsRecall</type></link> *template</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="ags-recall-remove-handler">ags_recall_remove_handler</link>           (<parameter><link linkend="AgsRecall"><type>AgsRecall</type></link> *recall</parameter>,
                                                         <parameter><link linkend="AgsRecallHandler"><type>AgsRecallHandler</type></link> *recall_handler</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="ags-recall-resolve-dependencies">ags_recall_resolve_dependencies</link>     (<parameter><link linkend="AgsRecall"><type>AgsRecall</type></link> *reall</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="ags-recall-run-init">ags_recall_run_init</link>                 (<parameter><link linkend="AgsRecall"><type>AgsRecall</type></link> *recall</parameter>,
                                                         <parameter><link linkend="guint"><type>guint</type></link> stage</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="ags-recall-run-init-inter">ags_recall_run_init_inter</link>           (<parameter><link linkend="AgsRecall"><type>AgsRecall</type></link> *recall</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="ags-recall-run-init-post">ags_recall_run_init_post</link>            (<parameter><link linkend="AgsRecall"><type>AgsRecall</type></link> *recall</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="ags-recall-run-init-pre">ags_recall_run_init_pre</link>             (<parameter><link linkend="AgsRecall"><type>AgsRecall</type></link> *recall</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="ags-recall-run-inter">ags_recall_run_inter</link>                (<parameter><link linkend="AgsRecall"><type>AgsRecall</type></link> *recall</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="ags-recall-run-post">ags_recall_run_post</link>                 (<parameter><link linkend="AgsRecall"><type>AgsRecall</type></link> *recall</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="ags-recall-run-pre">ags_recall_run_pre</link>                  (<parameter><link linkend="AgsRecall"><type>AgsRecall</type></link> *recall</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="ags-recall-set-devout-recursive">ags_recall_set_devout_recursive</link>     (<parameter><link linkend="AgsRecall"><type>AgsRecall</type></link> *recall</parameter>,
                                                         <parameter><link linkend="GObject"><type>GObject</type></link> *devout</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="ags-recall-set-effect">ags_recall_set_effect</link>               (<parameter><link linkend="AgsRecall"><type>AgsRecall</type></link> *recall</parameter>,
                                                         <parameter><link linkend="char"><type>char</type></link> *effect</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="ags-recall-set-flags">ags_recall_set_flags</link>                (<parameter><link linkend="AgsRecall"><type>AgsRecall</type></link> *recall</parameter>,
                                                         <parameter><link linkend="guint"><type>guint</type></link> flags</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="ags-recall-set-recall-id">ags_recall_set_recall_id</link>            (<parameter><link linkend="AgsRecall"><type>AgsRecall</type></link> *recall</parameter>,
                                                         <parameter><link linkend="AgsRecallID"><type>AgsRecallID</type></link> *recall_id</parameter>);
<link linkend="void"><returnvalue>void</returnvalue></link>                <link linkend="ags-recall-stop-persistent">ags_recall_stop_persistent</link>          (<parameter><link linkend="AgsRecall"><type>AgsRecall</type></link> *recall</parameter>);
<link linkend="GList"><returnvalue>GList</returnvalue></link> *             <link linkend="ags-recall-template-find-provider">ags_recall_template_find_provider</link>   (<parameter><link linkend="GList"><type>GList</type></link> *recall</parameter>,
                                                         <parameter><link linkend="GObject"><type>GObject</type></link> *provider</parameter>);
<link linkend="GList"><returnvalue>GList</returnvalue></link> *             <link linkend="ags-recall-template-find-type">ags_recall_template_find_type</link>       (<parameter><link linkend="GList"><type>GList</type></link> *recall</parameter>,
                                                         <parameter><link linkend="GType"><type>GType</type></link> type</parameter>);
</synopsis>
</refsynopsisdiv>

<refsect1 id="ags-AgsRecall.description" role="desc">
<title role="desc.title">Description</title>
<para>
</para>
</refsect1>
<refsect1 id="ags-AgsRecall.details" role="details">
<title role="details.title">Details</title>
<refsect2 id="AGS-RECALL-DEFAULT-BUILD-ID:CAPS" role="macro">
<title>AGS_RECALL_DEFAULT_BUILD_ID</title>
<indexterm zone="AGS-RECALL-DEFAULT-BUILD-ID:CAPS"><primary>AGS_RECALL_DEFAULT_BUILD_ID</primary></indexterm>
<programlisting>#define AGS_RECALL_DEFAULT_BUILD_ID "CEST 02-10-2014 19:36\0"
</programlisting>
<para>
</para></refsect2>
<refsect2 id="AGS-RECALL-DEFAULT-VERSION:CAPS" role="macro">
<title>AGS_RECALL_DEFAULT_VERSION</title>
<indexterm zone="AGS-RECALL-DEFAULT-VERSION:CAPS"><primary>AGS_RECALL_DEFAULT_VERSION</primary></indexterm>
<programlisting>#define AGS_RECALL_DEFAULT_VERSION "0.4.2\0"
</programlisting>
<para>
</para></refsect2>
<refsect2 id="AGS-RECALL-HANDLER:CAPS" role="macro">
<title>AGS_RECALL_HANDLER()</title>
<indexterm zone="AGS-RECALL-HANDLER:CAPS"><primary>AGS_RECALL_HANDLER</primary></indexterm>
<programlisting>#define AGS_RECALL_HANDLER(handler)    ((AgsRecallHandler *)(handler))
</programlisting>
<para>
</para></refsect2>
<refsect2 id="AgsRecall" role="struct">
<title>struct AgsRecall</title>
<indexterm zone="AgsRecall"><primary>AgsRecall</primary></indexterm>
<programlisting>struct AgsRecall {
  GObject object;

  guint flags;

  GObject *devout;
  GObject *container; // see AgsRecallContainer

  gchar *version;
  gchar *build_id;

  gchar *effect;
  gchar *name;

  gchar *xml_type;

  GList *dependencies;

  AgsRecallID *recall_id;

  AgsRecall *parent;
  GList *children;

  GType child_type;
  GParameter *child_parameters;
  guint n_params;

  GList *port;
  
  GList *handlers;
};
</programlisting>
<para>
</para></refsect2>
<refsect2 id="AgsRecallClass" role="struct">
<title>struct AgsRecallClass</title>
<indexterm zone="AgsRecallClass"><primary>AgsRecallClass</primary></indexterm>
<programlisting>struct AgsRecallClass {
  GObjectClass object;

  void (*resolve_dependencies)(AgsRecall *recall);

  void (*run_init_pre)(AgsRecall *recall);
  void (*run_init_inter)(AgsRecall *recall);
  void (*run_init_post)(AgsRecall *recall);

  void (*run_pre)(AgsRecall *recall);
  void (*run_inter)(AgsRecall *recall);
  void (*run_post)(AgsRecall *recall);

  void (*stop_persistent)(AgsRecall *recall);
  void (*done)(AgsRecall *recall);

  void (*cancel)(AgsRecall *recall);
  void (*remove)(AgsRecall *recall);

  AgsRecall* (*duplicate)(AgsRecall *recall,
			  AgsRecallID *recall_id,
			  guint *n_params, GParameter *params); // if a sequencer is linked with a sequencer the AgsRecall's with the flag AGS_RECALL_SOURCE must be duplicated

  void (*notify_dependency)(AgsRecall *recall, guint dependency, gboolean increase);

  void (*child_added)(AgsRecall *recall, AgsRecall *child);
};
</programlisting>
<para>
</para></refsect2>
<refsect2 id="AgsRecallFlags" role="enum">
<title>enum AgsRecallFlags</title>
<indexterm zone="AgsRecallFlags"><primary>AgsRecallFlags</primary></indexterm>
<programlisting>typedef enum {
  AGS_RECALL_CONNECTED             = 1,
  AGS_RECALL_RUN_INITIALIZED       = 1 &lt;&lt;  1, //TODO:JK: rename to AGS_RECALL_RUN_CONNECTED
  AGS_RECALL_TEMPLATE              = 1 &lt;&lt;  2,
  AGS_RECALL_PLAYBACK              = 1 &lt;&lt;  3,
  AGS_RECALL_SEQUENCER             = 1 &lt;&lt;  4,
  AGS_RECALL_NOTATION              = 1 &lt;&lt;  5,
  AGS_RECALL_DEFAULT_TEMPLATE      = 1 &lt;&lt;  6,
  //TODO:JK: remove because it's useless
  //  AGS_RECALL_IS_REAL               = 1 &lt;&lt;  7,
  AGS_RECALL_INPUT_ORIENTATED      = 1 &lt;&lt;  8,
  AGS_RECALL_OUTPUT_ORIENTATED     = 1 &lt;&lt;  9,
  AGS_RECALL_PERSISTENT            = 1 &lt;&lt; 10,
  AGS_RECALL_INITIAL_RUN           = 1 &lt;&lt; 11,
  AGS_RECALL_TERMINATING           = 1 &lt;&lt; 12,
  AGS_RECALL_DONE                  = 1 &lt;&lt; 13,
  AGS_RECALL_REMOVE                = 1 &lt;&lt; 14,
  AGS_RECALL_HIDE                  = 1 &lt;&lt; 15,
  AGS_RECALL_PROPAGATE_DONE        = 1 &lt;&lt; 16, // see ags_recall_real_remove
  AGS_RECALL_PERSISTENT_PLAYBACK   = 1 &lt;&lt; 17,
  AGS_RECALL_PERSISTENT_SEQUENCER  = 1 &lt;&lt; 18,
  AGS_RECALL_PERSISTENT_NOTATION   = 1 &lt;&lt; 19,
  AGS_RECALL_SKIP_DEPENDENCIES     = 1 &lt;&lt; 20,
} AgsRecallFlags;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="AgsRecallHandler" role="struct">
<title>struct AgsRecallHandler</title>
<indexterm zone="AgsRecallHandler"><primary>AgsRecallHandler</primary></indexterm>
<programlisting>struct AgsRecallHandler {
  const gchar *signal_name;
  GCallback callback;
  GObject *data;
  gulong handler;
};
</programlisting>
<para>
A <link linkend="AgsRecallHandler-struct"><type>AgsRecallHandler</type></link> acts as a callback definition
</para></refsect2>
<refsect2 id="AgsRecallNotifyDependencyMode" role="enum">
<title>enum AgsRecallNotifyDependencyMode</title>
<indexterm zone="AgsRecallNotifyDependencyMode"><primary>AgsRecallNotifyDependencyMode</primary></indexterm>
<programlisting>typedef enum {
  AGS_RECALL_NOTIFY_RUN,
  AGS_RECALL_NOTIFY_AUDIO,
  AGS_RECALL_NOTIFY_AUDIO_RUN,
  AGS_RECALL_NOTIFY_CHANNEL,
  AGS_RECALL_NOTIFY_CHANNEL_RUN,
  AGS_RECALL_NOTIFY_RECALL,
} AgsRecallNotifyDependencyMode;
</programlisting>
<para>
</para></refsect2>
<refsect2 id="ags-recall-add-child" role="function">
<title>ags_recall_add_child ()</title>
<indexterm zone="ags-recall-add-child"><primary>ags_recall_add_child</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                ags_recall_add_child                (<parameter><link linkend="AgsRecall"><type>AgsRecall</type></link> *recall</parameter>,
                                                         <parameter><link linkend="AgsRecall"><type>AgsRecall</type></link> *child</parameter>);</programlisting>
<para>
An <link linkend="AgsRecall"><type>AgsRecall</type></link> may have children.
</para></refsect2>
<refsect2 id="ags-recall-add-dependency" role="function">
<title>ags_recall_add_dependency ()</title>
<indexterm zone="ags-recall-add-dependency"><primary>ags_recall_add_dependency</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                ags_recall_add_dependency           (<parameter><link linkend="AgsRecall"><type>AgsRecall</type></link> *recall</parameter>,
                                                         <parameter><link linkend="AgsRecallDependency"><type>AgsRecallDependency</type></link> *dependency</parameter>);</programlisting>
<para>
Associate a new dependency for this recall.
</para></refsect2>
<refsect2 id="ags-recall-add-handler" role="function">
<title>ags_recall_add_handler ()</title>
<indexterm zone="ags-recall-add-handler"><primary>ags_recall_add_handler</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                ags_recall_add_handler              (<parameter><link linkend="AgsRecall"><type>AgsRecall</type></link> *recall</parameter>,
                                                         <parameter><link linkend="AgsRecallHandler"><type>AgsRecallHandler</type></link> *recall_handler</parameter>);</programlisting>
<para>
</para></refsect2>
<refsect2 id="ags-recall-cancel" role="function">
<title>ags_recall_cancel ()</title>
<indexterm zone="ags-recall-cancel"><primary>ags_recall_cancel</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                ags_recall_cancel                   (<parameter><link linkend="AgsRecall"><type>AgsRecall</type></link> *recall</parameter>);</programlisting>
<para>
The <link linkend="AgsRecall"><type>AgsRecall</type></link> doesn't want to run anymore, it aborts further execution.
</para></refsect2>
<refsect2 id="ags-recall-child-added" role="function">
<title>ags_recall_child_added ()</title>
<indexterm zone="ags-recall-child-added"><primary>ags_recall_child_added</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                ags_recall_child_added              (<parameter><link linkend="AgsRecall"><type>AgsRecall</type></link> *parent</parameter>,
                                                         <parameter><link linkend="AgsRecall"><type>AgsRecall</type></link> *child</parameter>);</programlisting>
<para>
</para></refsect2>
<refsect2 id="ags-recall-done" role="function">
<title>ags_recall_done ()</title>
<indexterm zone="ags-recall-done"><primary>ags_recall_done</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                ags_recall_done                     (<parameter><link linkend="AgsRecall"><type>AgsRecall</type></link> *recall</parameter>);</programlisting>
<para>
The <link linkend="AgsRecall"><type>AgsRecall</type></link> doesn't want to run anymore, it has been done its
work.
</para></refsect2>
<refsect2 id="ags-recall-duplicate" role="function">
<title>ags_recall_duplicate ()</title>
<indexterm zone="ags-recall-duplicate"><primary>ags_recall_duplicate</primary></indexterm>
<programlisting><link linkend="AgsRecall"><returnvalue>AgsRecall</returnvalue></link> *         ags_recall_duplicate                (<parameter><link linkend="AgsRecall"><type>AgsRecall</type></link> *recall</parameter>,
                                                         <parameter><link linkend="AgsRecallID"><type>AgsRecallID</type></link> *recall_id</parameter>);</programlisting>
<para>
Should duplicate an <link linkend="AgsRecall"><type>AgsRecall</type></link>, so it can pass the runs. Mainly used for
creating duplicates from templates, see <link linkend="AGS-RECALL-TEMPLATE:CAPS"><type>AGS_RECALL_TEMPLATE</type></link>.
</para></refsect2>
<refsect2 id="ags-recall-find-by-effect" role="function">
<title>ags_recall_find_by_effect ()</title>
<indexterm zone="ags-recall-find-by-effect"><primary>ags_recall_find_by_effect</primary></indexterm>
<programlisting><link linkend="GList"><returnvalue>GList</returnvalue></link> *             ags_recall_find_by_effect           (<parameter><link linkend="GList"><type>GList</type></link> *list</parameter>,
                                                         <parameter><link linkend="AgsRecallID"><type>AgsRecallID</type></link> *recall_id</parameter>,
                                                         <parameter><link linkend="char"><type>char</type></link> *effect</parameter>);</programlisting>
<para>
Finds next matching effect name. Intended to be used as
iteration function.
</para></refsect2>
<refsect2 id="ags-recall-find-provider" role="function">
<title>ags_recall_find_provider ()</title>
<indexterm zone="ags-recall-find-provider"><primary>ags_recall_find_provider</primary></indexterm>
<programlisting><link linkend="GList"><returnvalue>GList</returnvalue></link> *             ags_recall_find_provider            (<parameter><link linkend="GList"><type>GList</type></link> *recall</parameter>,
                                                         <parameter><link linkend="GObject"><type>GObject</type></link> *provider</parameter>);</programlisting>
<para>
</para></refsect2>
<refsect2 id="ags-recall-find-provider-with-recycling-container" role="function">
<title>ags_recall_find_provider_with_recycling_container ()</title>
<indexterm zone="ags-recall-find-provider-with-recycling-container"><primary>ags_recall_find_provider_with_recycling_container</primary></indexterm>
<programlisting><link linkend="GList"><returnvalue>GList</returnvalue></link> *             ags_recall_find_provider_with_recycling_container
                                                        (<parameter><link linkend="GList"><type>GList</type></link> *recall</parameter>,
                                                         <parameter><link linkend="GObject"><type>GObject</type></link> *provider</parameter>,
                                                         <parameter><link linkend="GObject"><type>GObject</type></link> *recycling_container</parameter>);</programlisting>
<para>
</para></refsect2>
<refsect2 id="ags-recall-find-recycling-container" role="function">
<title>ags_recall_find_recycling_container ()</title>
<indexterm zone="ags-recall-find-recycling-container"><primary>ags_recall_find_recycling_container</primary></indexterm>
<programlisting><link linkend="GList"><returnvalue>GList</returnvalue></link> *             ags_recall_find_recycling_container (<parameter><link linkend="GList"><type>GList</type></link> *recall</parameter>,
                                                         <parameter><link linkend="GObject"><type>GObject</type></link> *recycling_container</parameter>);</programlisting>
<para>
Finds next matching recall which has <parameter>recycling_container</parameter>, see <link linkend="AgsRecallId"><type>AgsRecallId</type></link> for further
details about <link linkend="AgsRecyclingContainer"><type>AgsRecyclingContainer</type></link>. Intended to be used as iteration function.
</para></refsect2>
<refsect2 id="ags-recall-find-template" role="function">
<title>ags_recall_find_template ()</title>
<indexterm zone="ags-recall-find-template"><primary>ags_recall_find_template</primary></indexterm>
<programlisting><link linkend="GList"><returnvalue>GList</returnvalue></link> *             ags_recall_find_template            (<parameter><link linkend="GList"><type>GList</type></link> *recall</parameter>);</programlisting>
<para>
Finds next template, see <link linkend="AGS-RECALL-TEMPLATE:CAPS"><type>AGS_RECALL_TEMPLATE</type></link> flag. Intended to be used as
iteration function.
</para></refsect2>
<refsect2 id="ags-recall-find-type" role="function">
<title>ags_recall_find_type ()</title>
<indexterm zone="ags-recall-find-type"><primary>ags_recall_find_type</primary></indexterm>
<programlisting><link linkend="GList"><returnvalue>GList</returnvalue></link> *             ags_recall_find_type                (<parameter><link linkend="GList"><type>GList</type></link> *recall</parameter>,
                                                         <parameter><link linkend="GType"><type>GType</type></link> type</parameter>);</programlisting>
<para>
Like <link linkend="ags-recall-find-provider"><function>ags_recall_find_provider()</function></link> but given additionally <parameter>recycling_container</parameter> as search parameter.
</para></refsect2>
<refsect2 id="ags-recall-find-type-with-recycling-container" role="function">
<title>ags_recall_find_type_with_recycling_container ()</title>
<indexterm zone="ags-recall-find-type-with-recycling-container"><primary>ags_recall_find_type_with_recycling_container</primary></indexterm>
<programlisting><link linkend="GList"><returnvalue>GList</returnvalue></link> *             ags_recall_find_type_with_recycling_container
                                                        (<parameter><link linkend="GList"><type>GList</type></link> *recall</parameter>,
                                                         <parameter><link linkend="GType"><type>GType</type></link> type</parameter>,
                                                         <parameter><link linkend="GObject"><type>GObject</type></link> *recycling_container</parameter>);</programlisting>
<para>
Finds next matching recall for type which has <parameter>recycling_container</parameter>, see <link linkend="AgsRecallId"><type>AgsRecallId</type></link> for further
details about <link linkend="AgsRecyclingContainer"><type>AgsRecyclingContainer</type></link>. Intended to be used as iteration function.
</para></refsect2>
<refsect2 id="ags-recall-get-children" role="function">
<title>ags_recall_get_children ()</title>
<indexterm zone="ags-recall-get-children"><primary>ags_recall_get_children</primary></indexterm>
<programlisting><link linkend="GList"><returnvalue>GList</returnvalue></link> *             ags_recall_get_children             (<parameter><link linkend="AgsRecall"><type>AgsRecall</type></link> *recall</parameter>);</programlisting>
</refsect2>
<refsect2 id="ags-recall-get-dependencies" role="function">
<title>ags_recall_get_dependencies ()</title>
<indexterm zone="ags-recall-get-dependencies"><primary>ags_recall_get_dependencies</primary></indexterm>
<programlisting><link linkend="GList"><returnvalue>GList</returnvalue></link> *             ags_recall_get_dependencies         (<parameter><link linkend="AgsRecall"><type>AgsRecall</type></link> *recall</parameter>);</programlisting>
</refsect2>
<refsect2 id="ags-recall-handler-alloc" role="function">
<title>ags_recall_handler_alloc ()</title>
<indexterm zone="ags-recall-handler-alloc"><primary>ags_recall_handler_alloc</primary></indexterm>
<programlisting><link linkend="AgsRecallHandler"><returnvalue>AgsRecallHandler</returnvalue></link> *  ags_recall_handler_alloc            (<parameter>const <link linkend="gchar"><type>gchar</type></link> *signal_name</parameter>,
                                                         <parameter><link linkend="GCallback"><type>GCallback</type></link> callback</parameter>,
                                                         <parameter><link linkend="GObject"><type>GObject</type></link> *data</parameter>);</programlisting>
<para>
</para></refsect2>
<refsect2 id="ags-recall-is-done" role="function">
<title>ags_recall_is_done ()</title>
<indexterm zone="ags-recall-is-done"><primary>ags_recall_is_done</primary></indexterm>
<programlisting><link linkend="gboolean"><returnvalue>gboolean</returnvalue></link>            ags_recall_is_done                  (<parameter><link linkend="GList"><type>GList</type></link> *recalls</parameter>,
                                                         <parameter><link linkend="GObject"><type>GObject</type></link> *recycling_container</parameter>);</programlisting>
<para>
Check if recall is over.
</para></refsect2>
<refsect2 id="ags-recall-new" role="function">
<title>ags_recall_new ()</title>
<indexterm zone="ags-recall-new"><primary>ags_recall_new</primary></indexterm>
<programlisting><link linkend="AgsRecall"><returnvalue>AgsRecall</returnvalue></link> *         ags_recall_new                      ();</programlisting>
<para>
Creates an <link linkend="AgsRecall"><type>AgsRecall</type></link>.
</para><variablelist role="params">
<varlistentry><term><emphasis>Returns</emphasis>&#160;:</term><listitem><simpara>a new <link linkend="AgsRecall"><type>AgsRecall</type></link>.</simpara></listitem></varlistentry>
</variablelist></refsect2>
<refsect2 id="ags-recall-notify-dependency" role="function">
<title>ags_recall_notify_dependency ()</title>
<indexterm zone="ags-recall-notify-dependency"><primary>ags_recall_notify_dependency</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                ags_recall_notify_dependency        (<parameter><link linkend="AgsRecall"><type>AgsRecall</type></link> *recall</parameter>,
                                                         <parameter><link linkend="guint"><type>guint</type></link> dependency</parameter>,
                                                         <parameter><link linkend="gint"><type>gint</type></link> count</parameter>);</programlisting>
<para>
Notifies a recall that an other depends on it.
</para></refsect2>
<refsect2 id="ags-recall-remove" role="function">
<title>ags_recall_remove ()</title>
<indexterm zone="ags-recall-remove"><primary>ags_recall_remove</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                ags_recall_remove                   (<parameter><link linkend="AgsRecall"><type>AgsRecall</type></link> *recall</parameter>);</programlisting>
<para>
The <link linkend="AgsRecall"><type>AgsRecall</type></link> will be removed immediately.
</para></refsect2>
<refsect2 id="ags-recall-remove-child" role="function">
<title>ags_recall_remove_child ()</title>
<indexterm zone="ags-recall-remove-child"><primary>ags_recall_remove_child</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                ags_recall_remove_child             (<parameter><link linkend="AgsRecall"><type>AgsRecall</type></link> *recall</parameter>,
                                                         <parameter><link linkend="AgsRecall"><type>AgsRecall</type></link> *child</parameter>);</programlisting>
<para>
An <link linkend="AgsRecall"><type>AgsRecall</type></link> may have children.
</para></refsect2>
<refsect2 id="ags-recall-remove-dependency" role="function">
<title>ags_recall_remove_dependency ()</title>
<indexterm zone="ags-recall-remove-dependency"><primary>ags_recall_remove_dependency</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                ags_recall_remove_dependency        (<parameter><link linkend="AgsRecall"><type>AgsRecall</type></link> *recall</parameter>,
                                                         <parameter><link linkend="AgsRecall"><type>AgsRecall</type></link> *template</parameter>);</programlisting>
<para>
Remove a prior associated dependency.
</para></refsect2>
<refsect2 id="ags-recall-remove-handler" role="function">
<title>ags_recall_remove_handler ()</title>
<indexterm zone="ags-recall-remove-handler"><primary>ags_recall_remove_handler</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                ags_recall_remove_handler           (<parameter><link linkend="AgsRecall"><type>AgsRecall</type></link> *recall</parameter>,
                                                         <parameter><link linkend="AgsRecallHandler"><type>AgsRecallHandler</type></link> *recall_handler</parameter>);</programlisting>
<para>
</para></refsect2>
<refsect2 id="ags-recall-resolve-dependencies" role="function">
<title>ags_recall_resolve_dependencies ()</title>
<indexterm zone="ags-recall-resolve-dependencies"><primary>ags_recall_resolve_dependencies</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                ags_recall_resolve_dependencies     (<parameter><link linkend="AgsRecall"><type>AgsRecall</type></link> *reall</parameter>);</programlisting>
<para>
A signal indicating that the inheriting object should resolve
it's dependencies.
</para></refsect2>
<refsect2 id="ags-recall-run-init" role="function">
<title>ags_recall_run_init ()</title>
<indexterm zone="ags-recall-run-init"><primary>ags_recall_run_init</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                ags_recall_run_init                 (<parameter><link linkend="AgsRecall"><type>AgsRecall</type></link> *recall</parameter>,
                                                         <parameter><link linkend="guint"><type>guint</type></link> stage</parameter>);</programlisting>
<para>
</para></refsect2>
<refsect2 id="ags-recall-run-init-inter" role="function">
<title>ags_recall_run_init_inter ()</title>
<indexterm zone="ags-recall-run-init-inter"><primary>ags_recall_run_init_inter</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                ags_recall_run_init_inter           (<parameter><link linkend="AgsRecall"><type>AgsRecall</type></link> *recall</parameter>);</programlisting>
<para>
This is the inter stage within a run.
</para></refsect2>
<refsect2 id="ags-recall-run-init-post" role="function">
<title>ags_recall_run_init_post ()</title>
<indexterm zone="ags-recall-run-init-post"><primary>ags_recall_run_init_post</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                ags_recall_run_init_post            (<parameter><link linkend="AgsRecall"><type>AgsRecall</type></link> *recall</parameter>);</programlisting>
<para>
This is the post stage within a run.
</para></refsect2>
<refsect2 id="ags-recall-run-init-pre" role="function">
<title>ags_recall_run_init_pre ()</title>
<indexterm zone="ags-recall-run-init-pre"><primary>ags_recall_run_init_pre</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                ags_recall_run_init_pre             (<parameter><link linkend="AgsRecall"><type>AgsRecall</type></link> *recall</parameter>);</programlisting>
<para>
This is the pre stage within a run.
</para></refsect2>
<refsect2 id="ags-recall-run-inter" role="function">
<title>ags_recall_run_inter ()</title>
<indexterm zone="ags-recall-run-inter"><primary>ags_recall_run_inter</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                ags_recall_run_inter                (<parameter><link linkend="AgsRecall"><type>AgsRecall</type></link> *recall</parameter>);</programlisting>
<para>
</para></refsect2>
<refsect2 id="ags-recall-run-post" role="function">
<title>ags_recall_run_post ()</title>
<indexterm zone="ags-recall-run-post"><primary>ags_recall_run_post</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                ags_recall_run_post                 (<parameter><link linkend="AgsRecall"><type>AgsRecall</type></link> *recall</parameter>);</programlisting>
<para>
</para></refsect2>
<refsect2 id="ags-recall-run-pre" role="function">
<title>ags_recall_run_pre ()</title>
<indexterm zone="ags-recall-run-pre"><primary>ags_recall_run_pre</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                ags_recall_run_pre                  (<parameter><link linkend="AgsRecall"><type>AgsRecall</type></link> *recall</parameter>);</programlisting>
<para>
</para></refsect2>
<refsect2 id="ags-recall-set-devout-recursive" role="function">
<title>ags_recall_set_devout_recursive ()</title>
<indexterm zone="ags-recall-set-devout-recursive"><primary>ags_recall_set_devout_recursive</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                ags_recall_set_devout_recursive     (<parameter><link linkend="AgsRecall"><type>AgsRecall</type></link> *recall</parameter>,
                                                         <parameter><link linkend="GObject"><type>GObject</type></link> *devout</parameter>);</programlisting>
<para>
</para></refsect2>
<refsect2 id="ags-recall-set-effect" role="function">
<title>ags_recall_set_effect ()</title>
<indexterm zone="ags-recall-set-effect"><primary>ags_recall_set_effect</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                ags_recall_set_effect               (<parameter><link linkend="AgsRecall"><type>AgsRecall</type></link> *recall</parameter>,
                                                         <parameter><link linkend="char"><type>char</type></link> *effect</parameter>);</programlisting>
<para>
</para></refsect2>
<refsect2 id="ags-recall-set-flags" role="function">
<title>ags_recall_set_flags ()</title>
<indexterm zone="ags-recall-set-flags"><primary>ags_recall_set_flags</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                ags_recall_set_flags                (<parameter><link linkend="AgsRecall"><type>AgsRecall</type></link> *recall</parameter>,
                                                         <parameter><link linkend="guint"><type>guint</type></link> flags</parameter>);</programlisting>
<para>
Set flags recursivly.
</para></refsect2>
<refsect2 id="ags-recall-set-recall-id" role="function">
<title>ags_recall_set_recall_id ()</title>
<indexterm zone="ags-recall-set-recall-id"><primary>ags_recall_set_recall_id</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                ags_recall_set_recall_id            (<parameter><link linkend="AgsRecall"><type>AgsRecall</type></link> *recall</parameter>,
                                                         <parameter><link linkend="AgsRecallID"><type>AgsRecallID</type></link> *recall_id</parameter>);</programlisting>
<para>
Sets the recall id recursively.
</para></refsect2>
<refsect2 id="ags-recall-stop-persistent" role="function">
<title>ags_recall_stop_persistent ()</title>
<indexterm zone="ags-recall-stop-persistent"><primary>ags_recall_stop_persistent</primary></indexterm>
<programlisting><link linkend="void"><returnvalue>void</returnvalue></link>                ags_recall_stop_persistent          (<parameter><link linkend="AgsRecall"><type>AgsRecall</type></link> *recall</parameter>);</programlisting>
<para>
Unsets the <link linkend="AGS-RECALL-PERSISTENT:CAPS"><literal>AGS_RECALL_PERSISTENT</literal></link> flag set and invokes <link linkend="ags-recall-done"><function>ags_recall_done()</function></link>.
</para></refsect2>
<refsect2 id="ags-recall-template-find-provider" role="function">
<title>ags_recall_template_find_provider ()</title>
<indexterm zone="ags-recall-template-find-provider"><primary>ags_recall_template_find_provider</primary></indexterm>
<programlisting><link linkend="GList"><returnvalue>GList</returnvalue></link> *             ags_recall_template_find_provider   (<parameter><link linkend="GList"><type>GList</type></link> *recall</parameter>,
                                                         <parameter><link linkend="GObject"><type>GObject</type></link> *provider</parameter>);</programlisting>
<para>
</para></refsect2>
<refsect2 id="ags-recall-template-find-type" role="function">
<title>ags_recall_template_find_type ()</title>
<indexterm zone="ags-recall-template-find-type"><primary>ags_recall_template_find_type</primary></indexterm>
<programlisting><link linkend="GList"><returnvalue>GList</returnvalue></link> *             ags_recall_template_find_type       (<parameter><link linkend="GList"><type>GList</type></link> *recall</parameter>,
                                                         <parameter><link linkend="GType"><type>GType</type></link> type</parameter>);</programlisting>
<para>
</para></refsect2>

</refsect1>

</refentry>
